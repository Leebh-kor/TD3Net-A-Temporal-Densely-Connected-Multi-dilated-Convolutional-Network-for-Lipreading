from config import *
from lipreading.train import *
from lipreading.eval import *
from lipreading.dataloaders import *
import itertools
import warnings
warnings.filterwarnings(action='ignore')

def main():
    args = load_args()
    # def get_location():
    #     location_meta = []
    #     if os.path.isfile('../location.txt') :
    #         with open('../location.txt', 'r') as f:
    #             for line in f: location_meta.append(line.strip())
    #     else : return None
        
    #     return location_meta  
    
    # args.location = get_location()
    # if args.location is not None :
    #     args.location.append(str(os.path.basename(os.path.normpath(os.getcwd()))))
    
    print(vars(args))
    seed_init()
    
    save_path = get_save_folder(args.logging_dir, args.ex_name)
    ckpt_saver = CheckpointSaver(save_path, mode = 'max')
    logger_save_path = os.path.join(save_path, args.config_path.split('/')[-1])
    logger = get_logger(logger_save_path)
    
    if args.neptune_logging:
        logger.info('---Do neptune logging---')
        neptune_logger = neptune_load(get_params(args), args.resume_id)
    else :
        logger.info('---Do not neptune logging---')
        neptune_logger = None

    if args.action == 'train':
        # dset_loaders = get_data_loaders(args, ['train', 'val', 'test'])
        dset_loaders = get_data_loaders(args, ['train', 'test'])

        trainer = Trainer(args, dset_loaders, ckpt_saver, logger, neptune_logger)
        trainer.train()
        
        tester = Tester(args, dset_loaders, logger, neptune_logger)
        tester.evaluate()   

    else:
        dset_loaders = get_data_loaders(args, ['test'])
        tester = Tester(args, dset_loaders, neptune_logger = neptune_logger)
        tester.evaluate()

    if args.neptune_logging:  
        neptune_logger.stop()

if __name__ == "__main__":
    main()
